/*
 *
 * Copyright 2011 Markus Pielmeier
 *
 * This file is part of java-deobscurify.
 *
 * java-deobscurify is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * java-deobscurify is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with java-deobscurify.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package com.github.marook.java_deobscurify.compare.methods_equal;

import junit.framework.Assert;

import org.junit.Before;
import org.junit.Test;

import com.github.marook.java_deobscurify.model.Type;
import com.github.marook.java_deobscurify.util.Equalator;

public class ObscurifiedTypeEqualatorTest {

	private Equalator<Type> equalator;

	@Before
	public void setUpEqualator() {
		equalator = new ObscurifiedTypeEqualator();
	}

	private void assertEqual(final String type1, final String type2) {
		final Type t1 = new Type(type1);
		final Type t2 = new Type(type2);

		Assert.assertTrue(equalator.equalTo(t1, t2));
	}

	private void assertNotEqual(final String type1, final String type2) {
		final Type t1 = new Type(type1);
		final Type t2 = new Type(type2);

		Assert.assertFalse(equalator.equalTo(t1, t2));
	}

	@Test
	public void atomicTypesAreEqual() {
		assertEqual("int", "int");
	}

	@Test
	public void atomicTypeArraysEqual() {
		assertEqual("int[]", "int[]");
	}

	@Test
	public void differentAtomicTypeArraysNotEqual() {
		assertNotEqual("int[]", "long[]");
	}

	@Test
	public void javaLangTypesEqual() {
		assertEqual("java.lang.String", "java.lang.String");
	}

	@Test
	public void differentJavaLangTypesNotEqual() {
		assertNotEqual("java.lang.String", "java.lang.Integer");
	}

	@Test
	public void differentAtomicTypesNotEqual() {
		assertNotEqual("int", "long");
	}

	/**
	 * Different objects should be equal because the different types names could
	 * be generated by obscurification.
	 */
	@Test
	public void differentObjectsEqual() {
		assertEqual("this.is.my.Type", "this.is.my.other.Type");
	}

	/**
	 * Types from the java JSE are not equal to any class.
	 */
	@Test
	public void objectAndJSEClassesAreNotEqual() {
		assertNotEqual("java.lang.String", "this.is.my.Type");
		assertNotEqual("java.util.List", "this.is.my.Type");
	}

}
